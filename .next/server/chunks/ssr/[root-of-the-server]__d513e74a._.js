module.exports=[18622,(a,b,c)=>{b.exports=a.x("next/dist/compiled/next-server/app-page-turbo.runtime.prod.js",()=>require("next/dist/compiled/next-server/app-page-turbo.runtime.prod.js"))},14747,(a,b,c)=>{b.exports=a.x("path",()=>require("path"))},24361,(a,b,c)=>{b.exports=a.x("util",()=>require("util"))},42602,(a,b,c)=>{"use strict";b.exports=a.r(18622)},87924,(a,b,c)=>{"use strict";b.exports=a.r(42602).vendored["react-ssr"].ReactJsxRuntime},72131,(a,b,c)=>{"use strict";b.exports=a.r(42602).vendored["react-ssr"].React},35112,(a,b,c)=>{"use strict";b.exports=a.r(42602).vendored["react-ssr"].ReactDOM},77929,a=>{"use strict";a.s(["firestoreService",()=>c]);class b{static instance;static getInstance(){return b.instance||(b.instance=new b),b.instance}async getUserProfile(a){try{let a=await fetch("/api/user/profile",{method:"GET",credentials:"include"});if(!a.ok){if(401===a.status)throw Error("Unauthorized");throw Error("Failed to get user profile")}let b=await a.json();if(!b.profile)return null;return{...b.profile,lastLogin:b.profile.lastLogin?new Date(b.profile.lastLogin):new Date,createdAt:b.profile.createdAt?new Date(b.profile.createdAt):new Date}}catch(a){throw console.error("Error getting user profile:",a),a}}async createUserProfile(a){try{if(!(await fetch("/api/user/profile",{method:"POST",headers:{"Content-Type":"application/json"},credentials:"include",body:JSON.stringify({profile:a})})).ok)throw Error("Failed to create user profile")}catch(a){throw console.error("Error creating user profile:",a),a}}async updateUserProfile(a,b){try{if(!(await fetch("/api/user/profile",{method:"PUT",headers:{"Content-Type":"application/json"},credentials:"include",body:JSON.stringify({updates:b})})).ok)throw Error("Failed to update user profile")}catch(a){throw console.error("Error updating user profile:",a),a}}async createWarehouse(a){try{let b=await fetch("/api/warehouses",{method:"POST",headers:{"Content-Type":"application/json"},credentials:"include",body:JSON.stringify({warehouse:a})});if(!b.ok)throw Error("Failed to create warehouse");return(await b.json()).warehouseId}catch(a){throw console.error("Error creating warehouse:",a),a}}async getUserWarehouses(){try{let a=await fetch("/api/warehouses",{method:"GET",credentials:"include"});if(!a.ok)throw Error("Failed to get warehouses");return(await a.json()).warehouses.map(a=>({...a,createdAt:a.createdAt?new Date(a.createdAt):new Date,updatedAt:a.updatedAt?new Date(a.updatedAt):new Date}))}catch(a){throw console.error("Error getting user warehouses:",a),a}}async getWarehouse(a){try{let b=await fetch(`/api/warehouses/${a}`,{method:"GET",credentials:"include"});if(!b.ok){if(404===b.status)return null;throw Error("Failed to get warehouse")}let c=await b.json();return{...c.warehouse,createdAt:c.warehouse.createdAt?new Date(c.warehouse.createdAt):new Date,updatedAt:c.warehouse.updatedAt?new Date(c.warehouse.updatedAt):new Date}}catch(a){throw console.error("Error getting warehouse:",a),a}}async updateWarehouse(a,b){try{if(!(await fetch(`/api/warehouses/${a}`,{method:"PUT",headers:{"Content-Type":"application/json"},credentials:"include",body:JSON.stringify({updates:b})})).ok)throw Error("Failed to update warehouse")}catch(a){throw console.error("Error updating warehouse:",a),a}}async deleteWarehouse(a){try{if(!(await fetch(`/api/warehouses/${a}`,{method:"DELETE",credentials:"include"})).ok)throw Error("Failed to delete warehouse")}catch(a){throw console.error("Error deleting warehouse:",a),a}}async getAllInventory(){try{let a=await fetch("/api/inventory",{method:"GET",credentials:"include"});if(!a.ok)throw Error("Failed to get inventory");return(await a.json()).items.map(a=>({...a,lastUpdated:a.lastUpdated?new Date(a.lastUpdated):new Date,createdAt:a.createdAt?new Date(a.createdAt):new Date}))}catch(a){throw console.error("Error getting inventory:",a),a}}async getWarehouseInventory(a){try{let b=await fetch(`/api/inventory?warehouseId=${a}`,{method:"GET",credentials:"include"});if(!b.ok)throw Error("Failed to get warehouse inventory");return(await b.json()).items.map(a=>({...a,lastUpdated:a.lastUpdated?new Date(a.lastUpdated):new Date,createdAt:a.createdAt?new Date(a.createdAt):new Date}))}catch(a){throw console.error("Error getting warehouse inventory:",a),a}}async getInventoryItem(a){try{let b=await fetch(`/api/inventory/${a}`,{method:"GET",credentials:"include"});if(!b.ok){if(404===b.status)return null;throw Error("Failed to get inventory item")}let c=await b.json();return{...c.item,lastUpdated:c.item.lastUpdated?new Date(c.item.lastUpdated):new Date,createdAt:c.item.createdAt?new Date(c.item.createdAt):new Date}}catch(a){throw console.error("Error getting inventory item:",a),a}}async addInventoryItem(a){try{let b=await fetch("/api/inventory",{method:"POST",headers:{"Content-Type":"application/json"},credentials:"include",body:JSON.stringify({item:a})});if(!b.ok)throw Error("Failed to add inventory item");return(await b.json()).itemId}catch(a){throw console.error("Error adding inventory item:",a),a}}async updateInventoryItem(a,b){try{if(!(await fetch(`/api/inventory/${a}`,{method:"PUT",headers:{"Content-Type":"application/json"},credentials:"include",body:JSON.stringify({updates:b})})).ok)throw Error("Failed to update inventory item")}catch(a){throw console.error("Error updating inventory item:",a),a}}async deleteInventoryItem(a){try{if(!(await fetch(`/api/inventory/${a}`,{method:"DELETE",credentials:"include"})).ok)throw Error("Failed to delete inventory item")}catch(a){throw console.error("Error deleting inventory item:",a),a}}async addTransaction(a){return""}async getWarehouseTransactions(a,b=50){return[]}}let c=b.getInstance()},35475,a=>{"use strict";a.s(["UserProvider",()=>h,"useUser",()=>g]);var b=a.i(87924),c=a.i(72131),d=a.i(11642),e=a.i(77929);let f=(0,c.createContext)(void 0);function g(){let a=(0,c.useContext)(f);if(void 0===a)throw Error("useUser must be used within a UserProvider");return a}function h({children:a}){let[g,h]=(0,c.useState)(null),[i,j]=(0,c.useState)(!0),{user:k}=(0,d.useAuth)(),l=async()=>{if(!k){h(null),j(!1);return}try{let a=await e.firestoreService.getUserProfile(k.uid);h(a)}catch(a){console.error("Error fetching user profile:",a),h(null)}finally{j(!1)}},m=async a=>{if(k&&g)try{await e.firestoreService.updateUserProfile(k.uid,a),h({...g,...a})}catch(a){throw console.error("Error updating user profile:",a),a}};return(0,c.useEffect)(()=>{l()},[k]),(0,b.jsx)(f.Provider,{value:{userProfile:g,loading:i,refreshProfile:l,updateProfile:m},children:a})}},26419,a=>{"use strict";a.s(["Toaster",()=>h],26419);var b=a.i(87924),c=a.i(72131),d=(a,b,c,d,e,f,g,h)=>{let i=document.documentElement,j=["light","dark"];function k(b){var c;(Array.isArray(a)?a:[a]).forEach(a=>{let c="class"===a,d=c&&f?e.map(a=>f[a]||a):e;c?(i.classList.remove(...d),i.classList.add(f&&f[b]?f[b]:b)):i.setAttribute(a,b)}),c=b,h&&j.includes(c)&&(i.style.colorScheme=c)}if(d)k(d);else try{let a=localStorage.getItem(b)||c,d=g&&"system"===a?window.matchMedia("(prefers-color-scheme: dark)").matches?"dark":"light":a;k(d)}catch(a){}},e=c.createContext(void 0),f={setTheme:a=>{},themes:[]};c.memo(({forcedTheme:a,storageKey:b,attribute:e,enableSystem:f,enableColorScheme:g,defaultTheme:h,value:i,themes:j,nonce:k,scriptProps:l})=>{let m=JSON.stringify([e,b,h,a,j,i,f,g]).slice(1,-1);return c.createElement("script",{...l,suppressHydrationWarning:!0,nonce:k,dangerouslySetInnerHTML:{__html:`(${d.toString()})(${m})`}})});var g=a.i(23292);let h=({...a})=>{let{theme:d="system"}=(()=>{var a;return null!=(a=c.useContext(e))?a:f})();return(0,b.jsx)(g.Toaster,{theme:d,className:"toaster group",style:{"--normal-bg":"var(--popover)","--normal-text":"var(--popover-foreground)","--normal-border":"var(--border)"},...a})}}];

//# sourceMappingURL=%5Broot-of-the-server%5D__d513e74a._.js.map